// To parse this JSON data, do
//
//     final game = gameFromMap(jsonString);

import 'dart:convert';

import 'package:dio/dio.dart';

class Game {
  Game({
    this.id,
    this.isFavorite,
    this.userRating,
    this.slug,
    this.name,
    this.description,
    this.released,
    this.updated,
    this.backgroundImage,
    this.backgroundImageAdditional,
    this.website,
    this.rating,
    this.alternativeNames,
    this.saturatedColor,
    this.dominantColor,
    this.parentPlatforms,
    this.platforms,
    this.stores,
    this.developers,
    this.genres,
    this.tags,
    this.publishers,
    this.videos,
    this.screenshots,
    this.series,
  });

  final int id;
  bool detailedLoaded = false;
  bool isFavorite;
  final double userRating;
  final String slug;
  final String name;
  final String description;
  final DateTime released;
  final DateTime updated;
  final String backgroundImage;
  final String backgroundImageAdditional;
  final String website;
  final double rating;
  final List<String> alternativeNames;
  final String saturatedColor;
  final String dominantColor;
  final List<ParentPlatform> parentPlatforms;
  final List<Platform> platforms;
  final List<Store> stores;
  final List<Developer> developers;
  final List<Developer> genres;
  final List<Developer> tags;
  final List<Developer> publishers;
  final List<Video> videos;
  final List<Screenshot> screenshots;
  final List<Game> series;

  static List<Game> toList(Response response) {
    return (response.data as List).map((game) => Game.fromMap(game)).toList();
  }

  factory Game.fromJson(String str) => Game.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Game.fromMap(Map<String, dynamic> json) => Game(
        id: json["id"] as int,
        isFavorite: json["is_favorite"] == null ? false : json['is_favorite'],
        userRating:
            json['user_rating'] == null ? -1 : json["user_rating"].toDouble(),
        slug: json["slug"] as String,
        name: json["name"] as String,
        description:
            json["description"] == null ? '' : json["description"] as String,
        released: DateTime.parse(json["released"]),
        updated: DateTime.parse(json["updated"]),
        backgroundImage: json["background_image"],
        backgroundImageAdditional: json["background_image_additional"] == null
            ? ''
            : json["background_image_additional"],
        website: json["website"] == null ? '' : json["website"],
        rating: json["rating"].toDouble(),
        alternativeNames: json["alternative_names"] == null
            ? []
            : List<String>.from(json["alternative_names"].map((x) => x)),
        saturatedColor: json["saturated_color"],
        dominantColor: json["dominant_color"],
        parentPlatforms: json['parent_platforms'] == null
            ? []
            : List<ParentPlatform>.from(
                json["parent_platforms"].map((x) => ParentPlatform.fromMap(x))),
        platforms: json["platforms"] == null
            ? []
            : List<Platform>.from(
                json["platforms"].map((x) => Platform.fromMap(x))),
        stores: List<Store>.from(json["stores"].map((x) => Store.fromMap(x))),
        developers: json['developers'] == null
            ? []
            : List<Developer>.from(
                json["developers"].map((x) => Developer.fromMap(x))),
        genres: json['genres'] == null
            ? []
            : List<Developer>.from(
                json["genres"].map((x) => Developer.fromMap(x))),
        tags: json['tags'] == null
            ? []
            : List<Developer>.from(
                json["tags"].map((x) => Developer.fromMap(x))),
        publishers: json['publishers'] == null
            ? []
            : List<Developer>.from(
                json["publishers"].map((x) => Developer.fromMap(x))),
        videos: json['videos'] == null
            ? []
            : List<Video>.from(json["videos"].map((x) => Video.fromMap(x))),
        screenshots: json['screenshots'] == null
            ? []
            : List<Screenshot>.from(
                json['screenshots'].map((x) => Screenshot.fromMap(x))),
        series: json['series'] == null
            ? []
            : List<Game>.from(json['series'].map((x) => Game.fromMap(x))),
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "is_favorite": isFavorite,
        "user_rating": userRating,
        "slug": slug,
        "name": name,
        "description": description,
        "released":
            "${released.year.toString().padLeft(4, '0')}-${released.month.toString().padLeft(2, '0')}-${released.day.toString().padLeft(2, '0')}",
        "updated": updated.toIso8601String(),
        "background_image": backgroundImage,
        "background_image_additional": backgroundImageAdditional,
        "website": website,
        "rating": rating,
        "alternative_names": List<dynamic>.from(alternativeNames.map((x) => x)),
        "saturated_color": saturatedColor,
        "dominant_color": dominantColor,
        "parent_platforms":
            List<dynamic>.from(parentPlatforms.map((x) => x.toMap())),
        "platforms": List<dynamic>.from(platforms.map((x) => x.toMap())),
        "stores": List<dynamic>.from(stores.map((x) => x.toMap())),
        "developers": List<dynamic>.from(developers.map((x) => x.toMap())),
        "genres": List<dynamic>.from(genres.map((x) => x.toMap())),
        "tags": List<dynamic>.from(tags.map((x) => x.toMap())),
        "publishers": List<dynamic>.from(publishers.map((x) => x.toMap())),
        "videos": List<dynamic>.from(videos.map((x) => x.toMap())),
      };
}

class Developer {
  Developer({
    this.id,
    this.name,
    this.slug,
    this.gamesCount,
    this.imageBackground,
    this.domain,
    this.language,
  });

  final int id;
  final String name;
  final String slug;
  final int gamesCount;
  final String imageBackground;
  final String domain;
  final Language language;

  factory Developer.fromJson(String str) => Developer.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Developer.fromMap(Map<String, dynamic> json) => Developer(
        id: json["id"],
        name: json["name"],
        slug: json["slug"],
        gamesCount: json["games_count"],
        imageBackground: json["image_background"],
        domain: json["domain"] == null ? null : json["domain"],
        language: json["language"] == null
            ? null
            : languageValues.map[json["language"]],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "name": name,
        "slug": slug,
        "games_count": gamesCount,
        "image_background": imageBackground,
        "domain": domain == null ? null : domain,
        "language": language == null ? null : languageValues.reverse[language],
      };
}

enum Language { ENG }

final languageValues = EnumValues({"eng": Language.ENG});

class ParentPlatform {
  ParentPlatform({
    this.platform,
  });

  final ParentPlatformPlatform platform;

  factory ParentPlatform.fromJson(String str) =>
      ParentPlatform.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory ParentPlatform.fromMap(Map<String, dynamic> json) => ParentPlatform(
        platform: ParentPlatformPlatform.fromMap(json["platform"]),
      );

  Map<String, dynamic> toMap() => {
        "platform": platform.toMap(),
      };
}

class ParentPlatformPlatform {
  ParentPlatformPlatform({
    this.id,
    this.name,
    this.slug,
  });

  final int id;
  final String name;
  final String slug;

  factory ParentPlatformPlatform.fromJson(String str) =>
      ParentPlatformPlatform.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory ParentPlatformPlatform.fromMap(Map<String, dynamic> json) =>
      ParentPlatformPlatform(
        id: json["id"],
        name: json["name"],
        slug: json["slug"],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "name": name,
        "slug": slug,
      };
}

class Platform {
  Platform({
    this.platform,
    this.releasedAt,
    this.requirementsEn,
    this.requirementsRu,
  });

  final PlatformClass platform;
  final DateTime releasedAt;
  final Requirements requirementsEn;
  final Requirements requirementsRu;

  factory Platform.fromJson(String str) => Platform.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Platform.fromMap(Map<String, dynamic> json) => Platform(
        platform: json["platform"] == null
            ? null
            : PlatformClass.fromMap(json["platform"]),
        releasedAt: json["released_at"] == null
            ? null
            : DateTime.parse(json["released_at"]),
        requirementsEn: json["requirements_en"] == null
            ? null
            : Requirements.fromMap(json["requirements_en"]),
        requirementsRu: json["requirements_ru"] == null
            ? null
            : Requirements.fromMap(json["requirements_ru"]),
      );

  Map<String, dynamic> toMap() => {
        "platform": platform.toMap(),
        "released_at":
            "${releasedAt.year.toString().padLeft(4, '0')}-${releasedAt.month.toString().padLeft(2, '0')}-${releasedAt.day.toString().padLeft(2, '0')}",
        "requirements_en": requirementsEn.toMap(),
        "requirements_ru": requirementsRu.toMap(),
      };
}

class PlatformClass {
  PlatformClass({
    this.id,
    this.name,
    this.slug,
    this.image,
    this.yearEnd,
    this.yearStart,
    this.gamesCount,
    this.imageBackground,
  });

  final int id;
  final String name;
  final String slug;
  final dynamic image;
  final dynamic yearEnd;
  final dynamic yearStart;
  final int gamesCount;
  final String imageBackground;

  factory PlatformClass.fromJson(String str) =>
      PlatformClass.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory PlatformClass.fromMap(Map<String, dynamic> json) => PlatformClass(
        id: json["id"],
        name: json["name"],
        slug: json["slug"],
        image: json["image"],
        yearEnd: json["year_end"],
        yearStart: json["year_start"],
        gamesCount: json["games_count"],
        imageBackground: json["image_background"],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "name": name,
        "slug": slug,
        "image": image,
        "year_end": yearEnd,
        "year_start": yearStart,
        "games_count": gamesCount,
        "image_background": imageBackground,
      };
}

class Requirements {
  Requirements({
    this.minimum,
    this.recommended,
  });

  final String minimum;
  final String recommended;

  factory Requirements.fromJson(String str) =>
      Requirements.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Requirements.fromMap(Map<String, dynamic> json) => Requirements(
        minimum: json["minimum"] == null ? null : json["minimum"],
        recommended: json["recommended"] == null ? null : json["recommended"],
      );

  Map<String, dynamic> toMap() => {
        "minimum": minimum == null ? null : minimum,
        "recommended": recommended == null ? null : recommended,
      };
}

class Store {
  Store({
    this.id,
    this.url,
    this.store,
  });

  final int id;
  final String url;
  final Developer store;

  factory Store.fromJson(String str) => Store.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Store.fromMap(Map<String, dynamic> json) => Store(
        id: json["id"],
        url: json["url"],
        store: Developer.fromMap(json["store"]),
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "url": url,
        "store": store.toMap(),
      };
}

class Video {
  Video({
    this.id,
    this.name,
    this.preview,
    this.data,
  });

  final int id;
  final String name;
  final String preview;
  final Data data;

  factory Video.fromJson(String str) => Video.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Video.fromMap(Map<String, dynamic> json) => Video(
        id: json["id"],
        name: json["name"],
        preview: json["preview"],
        data: Data.fromMap(json["data"]),
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "name": name,
        "preview": preview,
        "data": data.toMap(),
      };
}

class Screenshot {
  Screenshot({
    this.id,
    this.image,
    this.width,
    this.height,
    this.isDeleted,
  });

  final int id;
  final String image;
  final int width;
  final int height;
  final bool isDeleted;

  factory Screenshot.fromJson(String str) =>
      Screenshot.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Screenshot.fromMap(Map<String, dynamic> json) => Screenshot(
        id: json["id"],
        image: json["image"],
        width: json["width"],
        height: json["height"],
        isDeleted: json["is_deleted"],
      );

  Map<String, dynamic> toMap() => {
        "id": id,
        "image": image,
        "width": width,
        "height": height,
        "is_deleted": isDeleted,
      };
}

class Data {
  Data({
    this.the480,
    this.max,
  });

  final String the480;
  final String max;

  factory Data.fromJson(String str) => Data.fromMap(json.decode(str));

  String toJson() => json.encode(toMap());

  factory Data.fromMap(Map<String, dynamic> json) => Data(
        the480: json["480"],
        max: json["max"],
      );

  Map<String, dynamic> toMap() => {
        "480": the480,
        "max": max,
      };
}

class EnumValues<T> {
  Map<String, T> map;
  Map<T, String> reverseMap;

  EnumValues(this.map);

  Map<T, String> get reverse {
    if (reverseMap == null) {
      reverseMap = map.map((k, v) => new MapEntry(v, k));
    }
    return reverseMap;
  }
}
